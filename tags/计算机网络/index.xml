<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on regee&#39;s Blog</title>
    <link>https://zjregee.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on regee&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zjregee.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KCP之旅</title>
      <link>https://zjregee.github.io/p/kcp%E4%B9%8B%E6%97%85/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zjregee.github.io/p/kcp%E4%B9%8B%E6%97%85/</guid>
      <description>最近在写一个KCP的Swift实现，项目在https://github.com/zjregee/kcp-swift，把拥塞窗口去掉了，以及把大量不安全的指针运算用数组高层代替了。或许以后可以考虑在其上实现其他一些版本的拥塞控制和方法
项目参考了KCP的C源码https://github.com/zjregee/kcp以及一定的Swift版本的https://github.com/rannger/kcp-swift
介绍一下KCP KCP是基于UDP协议之上的ARQ协议实现。TCP虽然使用的更广泛，但是在某些实时性更高的领域，会更倾向于使用基于UDP的可靠传输协议
KCP力求在保证可靠性的情况下提高传输速度
KCP没有规定下层传输协议，但通常使用UDP来实现
在网络中，我们认为传输是不可靠的，而在很多场景下我们需要的是可靠的数据，所谓的可靠，指的是数据能够正常收到，且能够顺序受到，于是就有了ARQ协议，TCP之所以可靠就是基于此
ARQ协议（Automatic Repeat-reQuest），即自动重传请求，是传输层的错误纠正协议之一，它通过使用确认和超时两个机制，在不可靠的网络上实现可靠的信息传输
基本特征 RTO不翻倍 选择性重传 快速重传 非延迟ACK TCP在连续ARQ协议中，不会将一连串的每个数据都响应一次，而是延迟发送ACK，目的是为了充分利用带宽，但是这样会计算出较大的RTT时间，延长了丢包时的判断过程，而KCP的ACK是否延迟发送可以调节 UNA+ACK UNA模式参考特征2和特征4，ACK模式可以参考特征3。4字节una表示cmd=81时，当前已经收到了小于una的所有数据 非退让流控 至于通常使用UDP来实现KCP的原因，第一个是UDP的头部相对于TCP的头部来说更小，第二个是KCP相对于TCP来说有太多的冗余功能，这样白白导致了很多不必要的开销
核心函数 KCP的核心在于四个函数的实现，在这里简单介绍一下四个函数的流程
ikcp_send 检查是否是流模式，需要合并包，将buffer中的数据尽可能的追加到snd_queue中的最后一个报文 计算分片数量 创建多个报文段对象加入snd_queue ikcp_flush 检查ikcp_update是否被调用 将所有ACK报文写入buffer 确定是否需要发送探测报文 检查是否需要发送窗口探测报文，需要的话将报文写入buffer 检查是否需要发送窗口通知报文，需要的话将报文写入buffer 计算拥塞窗口 根据拥塞窗口将数据报文从snd_queue移动到snd_buf 判断快速重传条件，跳过次数以及超时时间 将snd_buf中满足条件的报文都发送出去 将buffer中剩余报文全部发送 根据丢包情况计算ssthresh和cwnd Tips
发送报文不是将snd_buf中的一一发送，而是必须都先写入buf 在写新报文到buf之前，需要判断buf大小是否过大，将要过大时直接将buf一次性发送 ptr、buffer、snd_queue、snd_buf ikcp_input 循环从收到的data里解包出报文段，为各个字段赋值 调用ikcp_parse_una，根据una将相应已确认送达的报文从snd_buf中删除 调用ikcp_shrink_buf，尝试向右移动snd_una 如果cmd==IKCP_CMD_ACK，即收到了ACK报文 计算RTO 将已确认送达的报文从snd_buf中删除 尝试向右移动snd_una 计算出这次input得到的最大ACK编号 如果cmd==IKCP_CMD_PUSH，即收到了数据报文 调用ikcp_ack_push将相关信息插入ACK列表中 调用ikcp_parse_data，将数据报文插入rcv_buf 在ikcp_parse_data中，会尽可能的将顺序正确的报文移入到rcv_queue中 如果cmd==IKCP_CMD_WASK，标记需要发送窗口通知报文 如果cmd==IKCP_CMD_WINS，什么都不用做，因为wnd字段前面已经取得了 调用ikcp_parse_fastack，检查snd_buf中编号小于maxack且未确认送达的报文，将其fastack加一，说明被跳过了 计算cwnd ikcp_recv 调用ikcp_peeksize，获取rcv_queue中第一个包的大小，因为需要考虑到分片 取出第一个包读入buffer rcv_queue空些了，再尝试从rcv_buf中取些报文到rcv_queue fast recover 拓展阅读 http://kaiyuan.me/2017/07/29/KCP%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/ https://www.codedump.info/post/20201105-kcp/ https://luyuhuang.tech/2020/12/09/kcp.html </description>
    </item>
    
  </channel>
</rss>
