<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 on regee&#39;s Blog</title>
    <link>https://zjregee.github.io/tags/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in 其他 on regee&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zjregee.github.io/tags/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何阅读一篇论文</title>
      <link>https://zjregee.github.io/p/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zjregee.github.io/p/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87/</guid>
      <description>最近开始在实验室做边缘环境下的经典分布式系统算法改进方面的研究，刚开始阅读一篇比较难的论文，读的毫无头绪，被研究生学长推荐了一个读论文的方法，也就是这篇文章http://blizzard.cs.uwaterloo.ca/keshav/home/Papers/data/07/paper-reading.pdf。在这里把这个方法记录下来。
学习读论文的重要性 在此之前我也看过一些论文，拿到一篇长十几页的论文，我总是从头开始，一句句的看过去，并且由于我的英语并不好，所以不能很好的理解上下文，也经常看到后面就忘记了前面。当这样读完一篇论文后，我的收获并没有那么大，往往只是字面意思的看了一遍。
想要搞科研的研究人员往往会花费大量的时间去阅读大量的论文，但是大家却很少讨论如何读论文的技能。因此没有经验的人可能会有许多的努力被浪费。所以这篇文章针对这个问题，提出了一个切实可行且高效的方式去阅读论文。
这让我想起了计算机教育中缺失的一课（https://missing-semester-cn.github.io）
The Three-Pass Approach 阅读一篇论文应该分为三个部分，而不是直接从头读到尾。每个部分都会实现具体的目标而且依赖于前面的步骤。
第一遍让你对这篇论文有一个大致的了解。第二遍让你掌握论文的内容，但不是细节。第三遍帮助你深入了解该论文。
The first pass 第一遍是快速扫描，对整个论文框架有一个整体认识，你可以由此决定是否要继续下面的pass。这一遍应该需要大约5到10分钟。
这些具体的时间都是这篇文章说的，我觉得以我的水平非常非常的的不科学wuwu
第一遍可以包括以下几个步骤：
仔细阅读title、abstract以及introduction 仔细阅读每个section以及sub-section的标题，但是忽略其他东西 看一下存在的数学部分，以此确定需要的理论基础 阅读这篇论文的结论 看一下论文的参考部分，寻找是否有你已经读过的资料 完成这一遍后，你应该可以回答下面的5个Cs：
Category：这是什么类型的论文？对现有系统的分析？对数据的测量？对研究原型的描述？ Context：它与其他哪些论文有关？用哪些理论基础来分析这个问题？ Correctness：假设是否有效？ Contributions：这篇论文的主要贡献是什么？ Clarity：这篇论文写的好吗，表述清晰吗？ 如果此时你发现你对这篇论文没有兴趣，或者你对这个领域的了解不足以去理解这篇论文，又或者论文作者做出了无效的假设，你可以不继续阅读下去。
这一遍对于那些不是你研究领域的论文来说是足够的，也可能在未来会被证明是相关的。
The second pass 在第二遍时，要更仔细地阅读论文，但可以忽略诸如证明等细节问题。在阅读过程中，可以记下关键点，或在空白处做评论，这会对阅读起到帮助。
仔细阅读论文中的数字、图表和插图。可以注意论文的图表是否有细节处的常见错误 记得标记相关的还没有阅读过的参考文献，以便之后可以进一步阅读，也可以让你对论文背景更好的了 对于一个有经验的读者来说，第二遍应该花上一个小时。经过这次阅读，你应该能够掌握论文的内容，向其他人总结论文的主旨，并提供支持性证据。这种详细程度已经适合于你感兴趣的论文，但对于属于你研究专长的论文还需进一步深入。
有时，即使在第二遍结束时，你也无法理解一篇论文。这可能是因为该主题对你来说是新的，有不熟悉的术语和缩略语，或者作者可能使用了你不理解的证明或实验技术，所以论文的大部分内容是无法理解的。论文可能写得很差，没有事实依据的断言和大量的转发引用。也可能只是因为现在是深夜，你很累。你现在可以选择：
把论文放在一边，希望你不需要了解这些内容就能在事业上获得成功 以后再看这篇论文，也许是在阅读更多的背景材料之后 坚持下去，进入第三遍 The third pass 要完全理解一篇论文，需要第三遍。第三遍的关键在于尝试虚拟地重新实现该论文：也就是说，在与作者做出相同假设的前提下，去理解并重新实现/创造该工作。通过这种比较再现和实际的论文，你不仅可以很容易的发现该论文的创新之处，甚至发现其中隐藏的问题和假设。
这一遍需要非常注意细节，你应该找出并挑战每一个提到的假设。此外，你还可以思考如果是你，你会如何陈述这个特定的想法。在这个过程中，你还可以记下对未来工作的想法。
这一遍对于初学者来说可能需要非常多的时间。如果完成了这一步，你应该能够根据记忆重建论文的整合结构，确定其强项和缺点，甚至指出隐含的假设、缺少的对相关工作的引用以及实验或分析技术可能存在的问题。
最后这篇文章还介绍了在做文献调查可能需要在不熟悉的领域阅读数十篇论文时可以采用的具体方法，该兴趣的可以直接去看这篇文章。</description>
    </item>
    
    <item>
      <title>FAT文件系统介绍</title>
      <link>https://zjregee.github.io/p/fat%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zjregee.github.io/p/fat%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</guid>
      <description>文件系统概述 在详细介绍FAT文件系统之前，我们先简单介绍一下 在Windows中比较常用的三种分区和卷管理的文件系统。
FAT概述 FAT文件系统的特点是文件分配表（FAT），他实际上是一个位于卷的“顶部”的表。为了保护卷，FAT的两个副本被保存起来，以防止一个被损坏。此外，FAT表和根目录必须存储在一个固定的位置，以便系统的启动文件能够被正确定位。
用FAT格式化的磁盘被分配在簇中，其大小由卷的大小决定。当一个文件被创建时，会在目录中创建一个条目，并建立包含数据的第一个簇号。FAT表中的这个条目要么表明这是文件的最后一个簇，要么指向下一个簇。
FAT的优点
FAT是目前应用最为广泛和获得操作系统支持最多的一种磁盘分区格式，几乎所有的操作系统都支持这一种格式。
FAT的缺点
在使用超过200MB的驱动器或分区时，不应使用FAT文件系统。这是因为随着卷大小的增加，FAT的性能将快速降低。无法对属于FAT分区的文件设置权限。
FAT分区的大小在Windows NT下被限制在最大4GB，在MS-DOS下被限制在2GB。
更新FAT表是非常重要的，也是非常耗时的。如果FAT没有定期更新，就会导致数据丢失。它很耗时，因为每次更新FAT表时，磁盘读头必须被重新定位到驱动器的逻辑轨道0。
HPFS 概述 HPFS文件系统的出现源于对当时市场上出现的较大的硬盘进行访问的允许。此外，为了满足网络服务器市场日益增长的需求，有必要采用新的文件系统来扩展命名系统、组织和安全性。HPFS保持了FAT的目录组织，但增加了基于文件名的目录的自动排序。此外，分配的单元从簇改为物理扇区，这减少了磁盘空间的损失。
HPFS的缺点
由于HPFS所涉及的开销，对于一个小于200MB的卷来说，它不是一个非常有效的选择。此外，对于大于400MB的卷，会有一些性能下降。你不能在Windows NT下为HPFS设置安全。
HPFS只在Windows NT 3.1、3.5和3.51版本下被支持。Windows NT 4.0 不能访问 HPFS 分区。
NTFS 概述 NTFS是Microsoft公司开发的专用文件系统，从Widows NT 3.1开始称为Windows NT家族的默认文件系统。NTFS取代FAT和HPFS并进行一系列改革改进成为更加完善的安全系统，例如增强对元数据的支持，使用更高级的数据结构以提升性能、可靠性和磁盘空间利用率，并附带一系列增强功能。
上面是对三种文件系统的一个大致介绍，可能有点宽泛，接下来我们依据微软提供的官方文档具体看一下FAT的细节与实现。
FAT细节 首先是一些基本概念
byte
作为一个单元操作的一串二进制数字
file
一个命名的字节流，代表一个信息的集合
sector
一个数据单位，可以独立于其他单位被访问
cluster
一个由一组逻辑上连续的扇区组成的分配单元。卷内的每个簇都用簇号N来表示。一个文件的所有分配都必须是一个簇的整数倍
partion
一个卷内一些簇组成的的一个范围
volume
磁盘上的一个存储区域
磁盘上的FAT格式有三种：
FAT12 FAT16 FAT32 卷的结构 一个FAT文件系统的卷是由四个基本区域组成的，它们在卷上是按以下顺序排列的
第一个是保留区域，第二个是FAT区域，第三个是根目录区域（在FAT32卷中不存在），第四个是文件和目录数据区域。
所有的FAT文件系统最初都是为IBM PC机器结构开发的。因此，磁盘上的FAT格式的数据结构都是little endian。
出现了一个新的名词，什么是little endian？
Big Endian认为第一个字节是最高位字节（按照从低地址到高地址的顺序存放数据的高位字节到低位字节），而Little Endian则相反，他认为第一个字节是最低位字节
Boot Sector 和 BPB BPB（BIOS参数块）位于卷中保留区域的第一个扇区中。这个扇区有时被称为启动扇区或第0扇区。这个扇区是卷的第一个扇区。
所有FAT卷都必须在启动扇区有一个BPB。
所以BPB是存储在Boot Sector中的数据，那么BPB是存了哪些数据呢？</description>
    </item>
    
  </channel>
</rss>
