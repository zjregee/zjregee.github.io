<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on regee&#39;s Blog</title>
    <link>https://zjregee.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on regee&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zjregee.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>variable-precision SWAR算法</title>
      <link>https://zjregee.github.io/p/variable-precision-swar%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zjregee.github.io/p/variable-precision-swar%E7%AE%97%E6%B3%95/</guid>
      <description>今天看到了一个非常有意思的算法，是目前针对统计二进制中1的个数这个问题的效率最好的通用算法，在这里记录一下。
要解决的问题 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &amp;lsquo;1&amp;rsquo; 的个数。这在数学上被称为计算汉明重量（Hamming Weight）。
因为汉明重量经常被用于信息论、编码理论和密码学，针对这个问题有多种不同的算法，一些处理器甚至直接带有计算汉明重量的指令，而对于不具备这种特殊指令的普通处理器来说，目前已知效率最高的通用算法就是variable-precision SWAR算法，该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。在介绍这个巧妙的算法之前先介绍一些常规算法。
遍历算法 直接循环检查给定整数n的二进制位的每一位是否是1，这个就不再赘述了。
查表算法 优化检查操作的一个办法时使用查表法：
对于一个有限集合来说，集合元素的排列方式是有限的。 而一个有限长度的位数组来说，它能表示的二进制位排列也是有限的。 所以，根据这个原理，我们可以直接创建一个表，表的键为某种排列的位数组，而表的值则是相应位数组中，值为1的二进制位的数量。创建了这种表以后，我们就可以根据输入的位数字进行查表，在无须对位数组的每个位进行检查的情况下，直接知道这个位数组包含了多少个值为1的二进制位。比如说，我们对于8位长的位数组创建表，我们每执行一次查表操作，就可以检查8个二进制位，和之前的遍历算法相比，通过内存的时间换空间策略，查表算法的效率提升了常数倍。
位运算优化 n &amp;amp; (n - 1)的运算结果可以把n的二进制位中的最低位的1变为0。也就是可以帮我们减少一个1的数量，我们可以利用这个位运算的性质加速我们的检查过程。运算次数等于n的二进制位中1的个数，在最坏情况下，效率会和遍历算法接近。
variable-precision SWAR算法 uint32_t swar(uint32_t i) { i = (i &amp;amp; 0x55555555 + ((i &amp;gt;&amp;gt; 1) &amp;amp; 0x55555555)); // 步骤1 i = (i &amp;amp; 0x33333333 + ((i &amp;gt;&amp;gt; 2) &amp;amp; 0x33333333)); // 步骤2 i = (i &amp;amp; 0x0f0f0f0f + ((i &amp;gt;&amp;gt; 4) &amp;amp; 0x0f0f0f0f)); // 步骤3 i = (i*(0x01010101) &amp;gt;&amp;gt; 24); // 步骤4 return i; } 步骤1计算出的值i的二进制表示可以按每两个二进制位为一组进行分组，各组的十进制表示就是该组的汉明重量。 步骤2计算出的值i的二进制表示可以按每四个二进制位为一组进行分组，各组的十进制表示就是该组的汉明重量。 步骤3计算出的值i的二进制表示可以按每八个二进制位为一组进行分组，各组的十进制表示就是该组的汉明重量。 步骤4的i*0x01010101语句计算出bitarray的汉明重量并记录在二进制位的最高八位，通过移位运算将汉明重量移动到最低八位，得出的结果就是bitarray的汉明重量。 swar函数每次执行可以计算32个二进制位的汉明重量，他比之前的遍历算法要快32倍，比键长为8位的查表法快4倍，并且因为swar函数是单纯的计算操作，所以它无需像查表法那样，使用额外的内存。</description>
    </item>
    
  </channel>
</rss>
